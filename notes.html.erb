Questions:
1/- file [] .screen_share_ids

2/- events controller #23 #29 screen share events action
  def screen_share_events
    if params[:id]
      @screen_share_events = ScreenShareEvent.joins(:screen_share)  #grabbing corresponding screen share
                                             .where(screen_share_id: params[:id])  #filter by the specific id

its basically an inner join

like this:
 user .... contacts (user_id)

inner join
left join
righ join
outter join

select users.* inner join on users.id = contact.user_id 


3/- screen_shares.html.erb #17
      <td><%= item.test.nil? ? 'N/A' : item.test.url %></td> <!-- if else statement -->


4/- tests controller #90
are @files nil until you get a recording complete event? i need to do if nil? then 'your file isnt ready'

@ files are empty
read into inner joins

5- where do the following get generated:
passed through a hash from the api. in callback controller

recording_id

event_type

screensharefile.url

-------
<BOOM>
**-mixpanel
**-distribute to more friends
-distribute to former coworkers
-distribute to designer news, linkedin, quora

target: freelance designers or consultants etc... theyll bill it to their client
---
-can turn recordingready notifications off
-reset password
-how it works (on home page)
-how startups are cakewalking section on home page
?-custom tasks?... after url is shortened, next to results button is edit tasks?
-html5 video, css animations
-custom routes ie /signup, rather than static_pages/signup
-add variables to sass css
-header logo, make link_to static_home_path
?-150 for unlimited (expires in 3 months)
-max time? min time?
-show like little notification bubbles when recordings are ready
#***-remove results button if f.ScreenShare.count == 0



-slack integrations
-everytime they push to production, auto user test. see if theres any 'user testing regression'


					screenleap.onScreenShareEnd = function() {
						var element = document.getElementById("something");
						element.innerHTML = "Screen Recording Ended";
						element.className = "btn redplanbutton";
						//update user balance
					    $.ajax({
					    	url: "users/decrementbalance",
					    	type: 'POST'
					    	success: function () {
		                    // it worked!  
		                	}
						});
			      		//update complete_date
					    };




					screenleap.onScreenShareEnd = function() {
						var element = document.getElementById("something");
						element.innerHTML = "Screen Recording Ended";
						element.className = "btn redplanbutton";
						//update user balance
					    var userBalance = <%= @test.user.balance %>
			      		userBalance--;
			      		//update complete_date
					    };



whats a cakewalk?
a cakewalk is a bite sized user test.


<%= form_for @current_user, url: chargeforone_tests_path, method: 'POST' do %>
  <script src="https://checkout.stripe.com/checkout.js" class="stripe-button"
          data-key="<%= Rails.configuration.stripe[:publishable_key] %>"
          data-description="1 User Test"
          data-amount="2500"
          data-email="<%= current_user.email %>">
  </script>
<% end %>




"You just bought #{pluralize(params[:plan], 'credit'}."






<a href=“<%= static_home_path %>” class=“cakewalk”>cakewalk<span id=“pink”>.io</span></a></div>
  </div>

<p class="cakewalk">cakewalk<span class="pink">.io</span></p>



      <div class="navbar-brand"><%= image_tag("walkingcake.png", class: "logo") %>  <%= link_to "cakewalk.io", static_home_path, class: 'cakewalk' %></div>





          <div class="navbar-brand"><%= image_tag("walkingcake.png", class: "logo") %>  
       <span class="cakewalk">cakewalk</span><span class="pink">.io</span>
    </div>





